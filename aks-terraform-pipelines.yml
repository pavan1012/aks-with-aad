# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'


variables:
- name: DEV_ENVIRONMENT
  value: dev

- name: QA_ENVIRONMENT
  value: qa


# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)


stages:
- stage: terraformvalidate
  jobs: 
    - job: terraformvalidate
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: publishpipelineartifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/Git-Repo-Files/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@0
        displayName: terraforminstall
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: terraforminit
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/Git-Repo-Files/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmSubscriptionId: 'b946077d-1524-470f-a675-7876b57b0d6c'
          ensureBackend: true
          backendAzureRmResourceGroupName: 'terraform-storage-rg'
          backendAzureRmStorageAccountName: 'k8storage123'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: terraformvalidate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/Git-Repo-Files/terraform-manifests'
          allowTelemetryCollection: false
# Stage-2: Deploy Stages for Dev & QA
# Deployment-1: Deploy Dev AKS Cluster
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step

- stage: DeployAKSClusters
  jobs:
    - deployment: DeployDEVAKSClusters
      displayName: DeployDEVAKSClusters
      pool:
        vmImage: 'Ubuntu-latest'
      environment: $(DEV_ENVIRONMENT) 
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: DownloadSecureFile@1
              displayName: DownloadSSHKeys
              name: sshkey
              inputs:
                secureFile: 'aks.pub'
            - task: TerraformCLI@0
              name: terraforminit
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/Git-Repo-Files/terraform-manifests-out'
                backendType: 'azurerm'
                backendServiceArm: 'terraform-aks-azurerm-svc-con'
                ensureBackend: true
                backendAzureRmResourceGroupName: 'terraform-storage-rg'
                backendAzureRmStorageAccountName: 'k8storage123'
                backendAzureRmContainerName: 'terraformstatexlrwdrzs'
                backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              name: terraformplan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/Git-Repo-Files/terraform-manifests-out'
                environmentServiceName: 'terraform-aks-azurerm-svc-con'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              name: terraformapply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/Git-Repo-files/terraform-manifests-out'
                environmentServiceName: 'terraform-aks-azurerm-svc-con'
                commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false